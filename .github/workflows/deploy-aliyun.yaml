# Sample workflow for building and deploying a Jekyll site to GitHub Pages
# 用于构建 Jekyll 站点并将其部署到 GitHub Pages 的示例工作流程

name: Deploy Jekyll with GitHub Pages dependencies preinstalled
# 工作流程的名称，会显示在 GitHub Actions 标签页中。
# 这个名称表明这是一个用于部署预装了 GitHub Pages 依赖的 Jekyll 站点的流程。

on:
  # Runs on pushes targeting the default branch
  # 当代码被推送到默认分支（通常是 main 或 master）时运行
  push:
    branches: ["main"] # 特指当代码被推送到名为 "main" 的分支时触发

  # Allows you to run this workflow manually from the Actions tab
  # 允许您从 Actions 标签页手动触发此工作流程
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
# 设置 GITHUB_TOKEN 的权限，以允许部署到 GitHub Pages。
# GITHUB_TOKEN 是 GitHub Actions 自动创建的一个临时令牌，用于在工作流程中授权操作。
permissions:
  contents: read    # 允许工作流程读取仓库内容（例如，检出代码）。
  pages: write      # 允许工作流程写入/部署到 GitHub Pages。
  id-token: write   # 允许工作流程请求 OpenID Connect (OIDC) ID 令牌，这对于安全的部署流程是必要的。



jobs: # 定义工作流程中的任务（作业）
  ## Build job
  # 构建作业
  build:
    runs-on: ubuntu-latest # 指定此作业将在最新版本的 Ubuntu Linux 环境中运行
    steps: # 定义 `build` 作业中要执行的一系列步骤
      - name: Checkout # 步骤名称：检出代码
        uses: actions/checkout@v4 # 使用官方的 `actions/checkout@v4` action (一个预设的脚本包)
        # 来将仓库的代码下载到运行器（runner）环境中。

      - name: Setup Pages # 步骤名称：设置 Pages
        uses: actions/configure-pages@v5 # 使用 `actions/configure-pages@v5` action
          # 来配置 GitHub Pages 构建环境，
        # 例如设置一些必要的环境变量或准备构建过程。

      - name: Build with Jekyll # 步骤名称：使用 Jekyll 构建
        uses: actions/jekyll-build-pages@v1 # 使用 `actions/jekyll-build-pages@v1` action
          # 来执行 Jekyll 构建。这个 action 专门为 GitHub Pages 优化，
        # 会使用与 GitHub Pages 服务器上相同的依赖项版本。
        with: # `with` 关键字用于向 action 提供输入参数
          source: ./            # 指定 Jekyll 站点的源文件位于仓库的根目录 (`./` 表示当前目录)。
          destination: ./_site  # 指定 Jekyll 构建后生成的静态文件存放在运行器环境中的 `_site` 目录。

      - name: Upload artifact # 步骤名称：上传构建产物
        uses: actions/upload-pages-artifact@v3 # 使用 `actions/upload-pages-artifact@v3` action
          # 将上一步在 `_site` 目录中生成的静态网站文件
        # 打包并上传。这个产物（artifact）后续会被 `deploy` 作业使用。
        with:
          path: ./_site

  # Deployment job
  # 部署作业
  deploy:
    environment: # 配置部署环境
      name: github-pages # 指定部署到名为 `github-pages` 的 GitHub Pages 环境。
      url: ${{ steps.deployment.outputs.page_url }} # 设置部署后站点的 URL。
        # 这个 URL 会在 GitHub Actions 的运行摘要中显示。
        # `${{ ... }}` 是 GitHub Actions 的表达式语法。
        # `steps.deployment.outputs.page_url` 表示从下面
      # `id` 为 `deployment` 的步骤的输出中获取 `page_url` 的值。

    runs-on: ubuntu-latest # 指定此作业在最新版本的 Ubuntu Linux 环境中运行。
    needs: build # 指定 `deploy` 作业依赖于 `build` 作业。
    # 也就是说，只有当 `build` 作业成功完成后，`deploy` 作业才会开始执行。
    steps: # 定义 `deploy` 作业中要执行的一系列步骤
      - name: Deploy to GitHub Pages # 步骤名称：部署到 GitHub Pages
        id: deployment # 给这个步骤一个ID，名为 `deployment`，这样其他地方就可以引用它的输出。
        uses: actions/deploy-pages@v4 # 使用官方的 `actions/deploy-pages@v4` action
          # 来执行实际的部署操作。它会获取由 `build` 作业上传的构建产物，
        # 并将其部署到 GitHub Pages。